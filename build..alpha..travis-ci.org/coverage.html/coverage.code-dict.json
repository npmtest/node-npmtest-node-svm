{"/home/travis/build/npmtest/node-npmtest-node-svm/test.js":"/* istanbul instrument in package npmtest_node_svm */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node-svm/lib.npmtest_node_svm.js":"/* istanbul instrument in package npmtest_node_svm */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_node_svm = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_node_svm = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-node-svm/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-node-svm && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_node_svm */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_node_svm\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_node_svm.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_node_svm.rollup.js'] =\n            local.assetsDict['/assets.npmtest_node_svm.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_node_svm.__dirname + '/lib.npmtest_node_svm.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node-svm/node_modules/node-svm/lib/index.js":"'use strict';\n\nvar util = require('util');\nvar svmTypes = require('./core/svm-types');\nvar kernelTypes = require('./core/kernel-types');\nvar defaultConfig = require('./core/config');\n\nvar SVM = require('./core/svm');\nvar readDataset = require('./util/read-dataset');\n\nfunction CSVC(config, model) {\n    config = config || {};\n    config.svmType = svmTypes.C_SVC;\n    SVM.call(this, config, model);\n}\nutil.inherits(CSVC, SVM);\n\nfunction NuSVC(config, model) {\n    config = config || {};\n    config.svmType = svmTypes.NU_SVC;\n    SVM.call(this, config, model);\n}\nutil.inherits(NuSVC, SVM);\n\nfunction EpsilonSVR(config, model) {\n    config = config || {};\n    config.svmType = svmTypes.EPSILON_SVR;\n    SVM.call(this, config, model);\n}\nutil.inherits(EpsilonSVR, SVM);\n\nfunction NuSVR(config, model) {\n    config = config || {};\n    config.svmType = svmTypes.NU_SVR;\n    SVM.call(this, config, model);\n}\nutil.inherits(NuSVR, SVM);\n\nfunction OneClassSVM(config, model) {\n    config = config || {};\n    config.svmType = svmTypes.ONE_CLASS;\n    SVM.call(this, config, model);\n}\nutil.inherits(OneClassSVM, SVM);\n\nfunction restore(model) {\n    var conf = defaultConfig({});\n    return new SVM(conf, model);\n}\n\nmodule.exports = {\n    svmTypes: svmTypes,\n    kernelTypes: kernelTypes,\n\n    // utils\n    read: readDataset,\n    restore: restore,\n\n    SVM: SVM,\n    CSVC: CSVC,\n    NuSVC: NuSVC,\n    EpsilonSVR: EpsilonSVR,\n    NuSVR: NuSVR,\n    OneClassSVM: OneClassSVM\n};\n\n\n","/home/travis/build/npmtest/node-npmtest-node-svm/node_modules/node-svm/lib/core/svm-types.js":"'use strict';\n\nmodule.exports = {\n    C_SVC: 0,       // multi-class classification\n    NU_SVC: 1,      // multi-class classification\n    ONE_CLASS: 2,   // one-class SVM\n    EPSILON_SVR : 3,// regression\n    NU_SVR: 4       // regression\n};","/home/travis/build/npmtest/node-npmtest-node-svm/node_modules/node-svm/lib/core/kernel-types.js":"'use strict';\n\nmodule.exports = {\n    LINEAR : 0,\n    POLY : 1,\n    RBF  : 2,\n    SIGMOID : 3\n};","/home/travis/build/npmtest/node-npmtest-node-svm/node_modules/node-svm/lib/core/config.js":"'use strict';\n\nvar _o = require('mout/object');\nvar _l = require('mout/lang');\nvar _s = require('mout/string');\nvar path = require('path');\nvar assert = require('assert');\nvar tty = require('tty');\n\nvar rc = require('../util/read-config');\nvar defaults = require('./default-options');\nvar svmTypes = require('./svm-types');\nvar kernelTypes = require('./kernel-types');\n\nvar cachedConfigs = {};\n\nfunction camelCase(config) {\n    var camelCased = {};\n\n    // Camel case\n    _o.forOwn(config, function (value, key) {\n        // Ignore null values\n        if (value == null) {\n            return;\n        }\n\n        key = _s.camelCase(key.replace(/_/g, '-'));\n        camelCased[key] = _l.isPlainObject(value) ? camelCase(value) : value;\n    });\n\n    return camelCased;\n}\n\nfunction normalise(rawConfig) {\n    var config = {};\n\n    // Mix in defaults and raw config\n    _o.deepMixIn(config, camelCase(rawConfig));\n\n\n    return config;\n}\n\nfunction checkConfig(config) {\n    assert(config.kFold > 0, 'k-fold must be >= 1');\n    // parameter C used for C-SVC, epsilon-SVR, and nu-SVR\n    if (_l.isString(config.svmType)){\n        config.svmType = svmTypes[config.svmType];\n    }\n    if (config.svmType === svmTypes.C_SVC ||\n        config.svmType === svmTypes.EPSILON_SVR ||\n        config.svmType === svmTypes.NU_SVR){\n        if (_l.isNumber(config.c)){\n            config.c = [config.c];\n        }\n        assert(config.c && config.c.length>0, 'Require at least one value for C parameter');\n    }\n    else {\n        config.c = [];\n    }\n\n    if (_l.isString(config.kernelType)){\n        config.kernelType = kernelTypes[config.kernelType];\n    }\n    // parameter gamma used for POLY, RBF, and SIGMOID kernels\n    if (config.kernelType === kernelTypes.POLY ||\n        config.kernelType === kernelTypes.RBF ||\n        config.kernelType === kernelTypes.SIGMOID){\n        if (_l.isNumber(config.gamma)){\n            config.gamma = [config.gamma];\n        }\n        assert(config.gamma && config.gamma.length > 0, 'Require at least one value for gamma parameter');\n    }\n    else {\n        config.gamma = [];\n    }\n\n    // parameter epsilon used for epsilon-SVR only\n    if (config.svmType === svmTypes.EPSILON_SVR){\n        if (_l.isNumber(config.epsilon)){\n            config.epsilon = [config.epsilon];\n        }\n        assert(config.epsilon && config.epsilon.length>0, 'Require at least one value for epsilon parameter');\n    }\n    else {\n        config.epsilon = [];\n    }\n\n    // parameter nu used for nu-SVC, one-class SVM, and nu-SVR\n    if (config.svmType === svmTypes.NU_SVC ||\n        config.svmType === svmTypes.ONE_CLASS ||\n        config.svmType === svmTypes.NU_SVR ){\n        if (_l.isNumber(config.nu)){\n            config.nu = [config.nu];\n        }\n        assert(config.nu && config.nu.length>0, 'Require at least one value for nu parameter');\n    }\n    else {\n        config.nu = [];\n    }\n\n    // parameter degree used only for POLY kernel\n    if (config.kernelType === kernelTypes.POLY ){\n        if (_l.isNumber(config.degree)){\n            config.degree = [config.degree];\n        }\n        assert(config.degree && config.degree.length>0, 'Require at least one value for degree parameter');\n    }\n    else {\n        config.degree = [];\n    }\n\n    // parameter r used for POLY kernel\n    if (config.kernelType === kernelTypes.POLY  ||\n        config.kernelType === kernelTypes.SIGMOID ){\n        if (_l.isNumber(config.r)){\n            config.r = [config.r];\n        }\n        assert(config.r && config.r.length>0, 'Require at least one value for r parameter');\n    }\n    else {\n        config.r = [];\n    }\n    return config;\n}\n\nfunction defaultConfig(config) {\n    config = config || {};\n\n    var cachedConfig = readCachedConfig(config.cwd || process.cwd());\n\n    return checkConfig(_o.merge(cachedConfig, config));\n}\n\nfunction readCachedConfig(cwd) {\n    if (cachedConfigs[cwd]) { return cachedConfigs[cwd]; }\n\n    var config = cachedConfigs[cwd] = normalise(rc('nodesvm', defaults, cwd));\n\n    if (!_o.has(config, 'interactive')) {\n        config.interactive = (process.bin === 'node-svm' && tty.isatty(1) && !process.env.CI);\n    }\n\n    return config;\n}\nfunction resetCache () {\n    cachedConfigs = {};\n}\nmodule.exports = defaultConfig;\nmodule.exports.reset = resetCache;","/home/travis/build/npmtest/node-npmtest-node-svm/node_modules/node-svm/lib/util/read-config.js":"'use strict';\n\nvar path = require('path');\nvar fs = require('graceful-fs');\nvar optimist = require('optimist');\nvar osenv = require('osenv');\nvar object = require('mout/object');\nvar string = require('mout/string');\nvar paths = require('./paths');\n\nvar win = process.platform === 'win32';\nvar home = osenv.home();\n\nfunction parse(content, file) {\n    var error;\n\n    if (!content.trim().length) {\n        return {};\n    }\n\n    try {\n        return JSON.parse(content);\n    } catch (e) {\n        if (file) {\n            error = new Error('Unable to parse ' + file + ': ' + e.message);\n        } else {\n            error = new Error('Unable to parse rc config: ' + e.message);\n        }\n\n        error.details = content;\n        error.code = 'EMALFORMED';\n        throw error;\n    }\n}\n\nfunction json(file) {\n    var content;\n\n    try {\n        content = fs.readFileSync(file).toString();\n    } catch (err) {\n        return null;\n    }\n\n    return parse(content, file);\n}\n\nfunction env(prefix) {\n    var obj = {};\n    var prefixLength = prefix.length;\n\n    prefix = prefix.toLowerCase();\n\n    object.forOwn(process.env, function (value, key) {\n        key = key.toLowerCase();\n\n        if (string.startsWith(key, prefix)) {\n            var parsedKey = key\n                .substr(prefixLength)\n                .replace(/__/g, '.')   // __ is used for nesting\n                .replace(/_/g, '-');   // _ is used as a - separator\n            object.set(obj, parsedKey, value);\n        }\n    });\n\n    return obj;\n}\n\nfunction find(filename, dir) {\n    var walk = function (filename, dir) {\n        var file = path.join(dir, filename);\n        var parent = path.dirname(dir);\n\n        try {\n            fs.statSync(file);\n            return file;\n        } catch (err) {\n            // Check if we hit the root\n            if (parent === dir) {\n                return null;\n            }\n\n            return walk(filename, parent);\n        }\n    };\n\n    dir = dir || process.cwd();\n    return walk(filename, dir);\n}\n\nmodule.exports = function(name, defaults, cwd, argv) {\n    var argvConfig;\n\n    defaults = defaults || {};\n    cwd = cwd || process.cwd();\n    argv = argv || optimist.argv;\n\n    // Parse --config.foo=false\n    argvConfig = object.map(argv.config || {}, function (value) {\n        return value === 'false' ? false : value;\n    });\n\n    return object.deepMixIn.apply(null, [\n        {},\n        defaults,\n        { cwd: cwd },\n        win ? {} : json(path.join('/etc', name + 'rc')),\n        !home ? {} : json(path.join(home, '.' + name + 'rc')),\n        json(path.join(paths.config, name + 'rc')),\n        json(find('.' + name + 'rc', cwd)),\n        env(name + '_'),\n        argvConfig\n    ]);\n};","/home/travis/build/npmtest/node-npmtest-node-svm/node_modules/node-svm/lib/util/paths.js":"'use strict';\n\nvar os = require('os');\nvar path = require('path');\nvar osenv = require('osenv');\nvar crypto = require('crypto');\n\nfunction generateFakeUser() {\n    var uid = process.pid + '-' + Date.now() + '-' + Math.floor(Math.random() * 1000000);\n    return crypto.createHash('md5').update(uid).digest('hex');\n}\n\n// Assume XDG defaults\n// See: http://standards.freedesktop.org/basedir-spec/basedir-spec-latest.html\nvar paths = {\n    config: process.env.XDG_CONFIG_HOME,\n    data: process.env.XDG_DATA_HOME,\n    cache: process.env.XDG_CACHE_HOME\n};\n\n// Guess some needed properties based on the user OS\nvar user = (osenv.user() || generateFakeUser()).replace(/\\\\/g, '-');\nvar tmp = path.join(os.tmpdir ? os.tmpdir() : os.tmpDir(), user);\nvar home = osenv.home();\nvar base;\n\n// Fallbacks for windows\nif (process.platform === 'win32') {\n    base = path.resolve(process.env.LOCALAPPDATA || home || tmp);\n    base = path.join(base, 'node-svm');\n\n    paths.config = paths.config || path.join(base, 'config');\n    paths.data = paths.data || path.join(base, 'data');\n    paths.cache = paths.cache || path.join(base, 'cache');\n// Fallbacks for other operating systems\n} else {\n    base = path.resolve(home || tmp);\n\n    paths.config = paths.config || path.join(base, '.config/node-svm');\n    paths.data = paths.data || path.join(base, '.local/share/node-svm');\n    paths.cache = paths.cache || path.join(base, '.cache/node-svm');\n}\n\npaths.tmp = path.resolve(path.join(tmp, 'node-svm'));\n\nmodule.exports = paths;","/home/travis/build/npmtest/node-npmtest-node-svm/node_modules/node-svm/lib/core/default-options.js":"'use strict';\n\nvar types = require('./svm-types');\nvar kernels = require('./kernel-types');\n\nmodule.exports = {\n    // svm type\n    'svm-type': types.C_SVC,\n\n    // kernels parameters\n    'kernel-type': kernels.RBF,\n    'degree': [2,3,4],                        // for POLY kernel\n    'gamma': [0.001, 0.01, 0.5], // for POLY, RBF and SIGMOID kernels\n    'r': [0.125, 0.5, 0, 1],            // for POLY and SIGMOID kernels\n\n    // SVM specific parameters\n    'c': [0.01, 0.125, 0.5, 1, 2],         // cost for C_SVC, EPSILON_SVR and NU_SVR\n    'nu': [0.01, 0.125, 0.5,  1],     // for NU_SVC, ONE_CLASS and NU_SVR\n    'epsilon': [0.01, 0.125, 0.5, 1],   // for EPSILON-SVR\n\n    // training options\n    'k-fold': 4,                              // k parameter for k-fold cross validation\n\n    'normalize': true,                        // whether to use mean normalization during data pre-processing\n\n    'reduce': true,                           // whether to use PCA to reduce dataset dimension during data pre-processing\n                                              // (see http://en.wikipedia.org/wiki/Principal_component_analysis)\n    'retained-variance': 0.99,                // Define the acceptable impact on data integrity (if PCA activated)\n\n    'eps': 1e-3,                              // stopping criteria\n    'cache-size': 200,                        // cache size in MB\n    'shrinking' : true,                       // whether to use the shrinking heuristics\n    'probability' : false,                    // whether to train a SVC or SVR model for probability estimates\n\n    // cli\n    'color': true,\n    'interactive': true\n};","/home/travis/build/npmtest/node-npmtest-node-svm/node_modules/node-svm/lib/core/svm.js":"'use strict';\n\nvar assert = require('assert');\nvar numeric = require('numeric');\nvar Q = require('q');\nvar _o = require('mout/object');\nvar _l = require('mout/lang');\nvar _a = require('mout/array');\n\n\nvar defaultConfig = require('./config');\nvar BaseSVM = require('./base-svm');\nvar gridSearch = require('./grid-search');\nvar svmTypes = require('./svm-types');\nvar classification = require('../evaluators/classification');\nvar regression = require('../evaluators/regression');\nvar createError = require('../util/create-error');\nvar normalizeDataset = require('../util/normalize-dataset');\nvar normalizeInput = require('../util/normalize-input');\nvar reduce = require('../util/reduce-dataset');\n\nvar SVM = function(config, model){\n    this._config = _l.deepClone(defaultConfig(config));\n    if (model){\n        this._restore(model);\n    }\n};\n\nSVM.prototype._restore = function (model) {\n    var self = this;\n    this._baseSvm = BaseSVM.restore(model);\n    _o.forOwn(model.params, function(val, key){\n        self._config[key] = val;\n    });\n};\n\nSVM.prototype.train = function(dataset) {\n    var deferred = Q.defer();\n    var self= this;\n    this._training = true;\n    var dims = numeric.dim(dataset);\n    assert(dims[0]>0 && dims[1] === 2 && dims[2]>0 , 'dataset must be an list of [X,y] tuples');\n\n    if (!this._config.normalize){\n        this._config.mu = _a.take(dims[2], function(){ return 0; });\n        this._config.sigma = _a.take(dims[2], function(){ return 1; });\n    }\n    else {\n        var norm = normalizeDataset(dataset);\n        this._config.mu = norm.mu;\n        this._config.sigma = norm.sigma;\n        dataset = norm.dataset;\n    }\n\n    if (!this._config.reduce){\n        this._config.u = numeric.identity(dims[2]);\n        this._retainedVariance = 1;\n        this._retainedDimension = dims[2];\n        this._initialDimension = dims[2];\n    }\n    else {\n        var red = reduce(dataset, this._config.retainedVariance);\n        this._config.u = red.U;\n        this._retainedVariance = red.retainedVariance;\n        this._retainedDimension = red.newDimension;\n        this._initialDimension = red.oldDimension;\n        dataset = red.dataset;\n    }\n\n    // evaluate all possible combinations using grid-search and CV\n    gridSearch(dataset, this._config)\n        .progress(function (progress) {\n            deferred.notify(progress.done / (progress.total + 1));\n        })\n        .spread(function(config, report){\n            self._baseSvm = new BaseSVM();\n            // train a new classifier using the entire dataset and the best config\n            return self._baseSvm.train(dataset, config)\n                .done(function (model) {\n                    deferred.notify(1);\n                    model.params = _o.merge(self._config, model.params);\n\n                    _o.mixIn(report, {\n                        reduce: self._config.reduce,\n                        retainedVariance : self._retainedVariance,\n                        retainedDimension : self._retainedDimension,\n                        initialDimension: self._initialDimension\n                    });\n                    deferred.resolve([model, report]);\n                });\n        })\n        .fail(function (err) {\n            throw err;\n        })\n        .fin(function () {\n            self._training = false;\n        });\n    return deferred.promise;\n};\n\nSVM.prototype.evaluate = function (testset) {\n    assert(this.isTrained(), 'train classifier first');\n    var dims = numeric.dim(testset);\n    assert(dims[0]>0 && dims[1] === 2 && dims[2]>0 , 'testset must be an list of [X,y] tuples');\n\n    var self = this;\n    var predictions = _a.map(testset, function (ex) { return [self.predictSync(ex[0]), ex[1]]; });\n\n    switch (this._config.svmType){\n        case svmTypes.C_SVC:\n        case svmTypes.NU_SVC:\n        case svmTypes.ONE_CLASS:\n            return classification.compute(predictions);\n        case svmTypes.EPSILON_SVR:\n        case svmTypes.NU_SVR:\n            return regression.compute(predictions);\n        default :\n            throw createError('not supported type', 'ENOTSUP');\n    }\n};\n\nSVM.prototype.getKernelType = function() {\n    return this._config.kernelType;\n};\n\nSVM.prototype.getSvmType = function() {\n    return this._config.svmType;\n};\n\nSVM.prototype.normalize = function() {\n    return this._config.normalize;\n};\n\nSVM.prototype.reduce = function() {\n    return this._config.reduce;\n};\n\nSVM.prototype.isTrained = function() {\n    return !!this._baseSvm ? this._baseSvm.isTrained(): false;\n};\n\nSVM.prototype.isTraining = function() {\n    return this._training;\n};\n\nSVM.prototype.predict = function(x){\n    assert(this.isTrained());\n    return this._baseSvm.predict(this._format(x));\n};\nSVM.prototype.predictSync = function(x){\n    assert(this.isTrained());\n    return this._baseSvm.predictSync(this._format(x));\n};\nSVM.prototype.predictProbabilities = function(x){\n    assert(this.isTrained());\n    return this._baseSvm.predictProbabilities(this._format(x));\n};\nSVM.prototype.predictProbabilitiesSync = function(x){\n    assert(this.isTrained());\n    return this._baseSvm.predictProbabilitiesSync(this._format(x));\n};\n\n// -----\nSVM.prototype._format = function (x) {\n    var xNorm = normalizeInput(x, this._config.mu, this._config.sigma);\n    return numeric.dot(xNorm, this._config.u);\n};\n\nmodule.exports = SVM;\n","/home/travis/build/npmtest/node-npmtest-node-svm/node_modules/node-svm/lib/core/base-svm.js":"'use strict';\n\nvar Q = require('q');\nvar assert = require('assert');\nvar numeric= require('numeric');\nvar _o = require('mout/object');\nvar _a = require('mout/array');\n\nvar addon = require('../../build/Release/addon');\nvar svmTypes = require('./svm-types');\nvar kernelTypes = require('./kernel-types');\nvar createError = require('../util/create-error');\n\nfunction BaseSVM(clf){\n    if (clf){\n        this._clf = clf;\n    }\n}\n\nBaseSVM.restore = function(model){\n   var clf = new addon.NodeSvm();\n   clf.loadFromModel(model);\n   return new BaseSVM(clf);\n};\n\nBaseSVM.prototype.train = function(dataset, config){\n    var dims = numeric.dim(dataset);\n    assert(dims[0]>0 && dims[1] === 2 && dims[2]>0 , 'dataset must be a list of [X,y] tuples');\n\n    var params = _o.merge({\n        svmType: svmTypes.C_SVC,\n        kernelType: kernelTypes.RBF,\n        degree: 3,\n        gamma: 1,\n        r: 0,\n        c: 1,\n        nu: 0.5,\n        epsilon: 0.1,\n        cacheSize: 100,\n        eps: 1e-3,\n        shrinking: true,\n        probability: false\n    }, config || {});\n\n    var self = this;\n    var deferred = Q.defer();\n    this._clf = new addon.NodeSvm();\n    var err = this._clf.setParameters(params);\n    if (err) {\n        return Q.reject(createError('Bad parameters', 'EINVPARAMS'));\n    }\n    this._clf.trainAsync(dataset, function () {\n        var model = self._clf.getModel();\n        deferred.resolve(model);\n    });\n    return deferred.promise;\n};\n\n\nBaseSVM.prototype.predictSync = function(inputs) {\n    assert(!!this._clf, 'train classifier first');\n    var dims = numeric.dim(inputs);\n    assert((dims[0] || 0) > 0 && (dims[1] || 0) === 0 , 'input must be a 1d array');\n    return this._clf.predict(inputs);\n};\nBaseSVM.prototype.predict = function(inputs){\n    assert(!!this._clf, 'train classifier first');\n    var dims = numeric.dim(inputs);\n    assert((dims[0] || 0) > 0 && (dims[1] || 0) === 0 , 'input must be a 1d array');\n    var deferred = Q.defer();\n\n    this._clf.predictAsync(inputs, function (prediction) {\n        deferred.resolve(prediction);\n    });\n    return deferred.promise;\n};\n\n/*\n WARNING : Seems not to work very well.\n see : http://stats.stackexchange.com/questions/64403/libsvm-probability-estimates-in-multi-class-problems\n */\nBaseSVM.prototype.predictProbabilitiesSync = function(inputs) {\n    assert(!!this._clf, 'train classifier first');\n    var dims = numeric.dim(inputs);\n    assert((dims[0] || 0) > 0 && (dims[1] || 0) === 0 , 'input must be a 1d array');\n\n    var probs = this._clf.predictProbabilities(inputs);\n    return _a.zip(this._clf.getLabels(), probs).reduce(function(res, tuple){\n        res[tuple[0]] = tuple[1];\n        return res;\n    }, {});\n};\nBaseSVM.prototype.predictProbabilities = function(inputs) {\n    assert(!!this._clf, 'train classifier first');\n    var dims = numeric.dim(inputs);\n    assert((dims[0] || 0) > 0 && (dims[1] || 0) === 0 , 'input must be a 1d array');\n    var self = this;\n    var deferred = Q.defer();\n    this._clf.predictProbabilitiesAsync(inputs, function (probs) {\n        var result = _a.zip(self._clf.getLabels(), probs).reduce(function(res, tuple){\n            res[tuple[0]] = tuple[1];\n            return res;\n        }, {});\n        deferred.resolve(result);\n    });\n    return deferred.promise;\n};\n\nBaseSVM.prototype.isTrained = function(){\n    return !!this._clf? this._clf.isTrained(): false;\n};\n\n\nmodule.exports = BaseSVM;","/home/travis/build/npmtest/node-npmtest-node-svm/node_modules/node-svm/lib/util/create-error.js":"'use strict';\nvar mout = require('mout');\n\nfunction createError(msg, code, props) {\n    var err = new Error(msg);\n    err.code = code;\n\n    if (props) {\n        mout.object.mixIn(err, props);\n    }\n\n    return err;\n}\n\nmodule.exports = createError;","/home/travis/build/npmtest/node-npmtest-node-svm/node_modules/node-svm/lib/core/grid-search.js":"'use strict';\n\nvar _l = require('mout/lang');\nvar _o = require('mout/object');\nvar _a = require('mout/array');\nvar assert = require('assert');\nvar Q = require('q');\nvar numeric= require('numeric');\n\nvar svmTypes = require('./svm-types');\nvar kernelTypes = require('./kernel-types');\nvar BaseSVM = require('./base-svm');\nvar defaultConfig = require('./config');\n\nvar evaluators = require('../evaluators');\n\nvar splitDataset = require('../util/split-dataset');\nvar createError = require('../util/create-error');\nvar crossCombinations = require('../util/cross-combinations');\n\n\nmodule.exports = function(dataset, config){\n\n    var deferred = Q.defer();\n    // default options\n    var dims = numeric.dim(dataset);\n\n    assert(dims[0]>0 && dims[1] === 2 && dims[2]>0 , 'dataset must be a list of [X,y] tuples');\n\n    var params = _l.deepClone(defaultConfig(config));\n\n    var combs = crossCombinations([\n        params.c || [],\n        params.gamma || [],\n        params.epsilon || [],\n        params.nu || [],\n        params.degree || [],\n        params.r || []\n    ]);\n\n    // split dataset for cross-validation\n    var subsets = splitDataset(dataset, params.kFold);\n\n    var evaluator = evaluators.getDefault(params);\n\n    var total = combs.length * subsets.length,\n        done = 0;\n\n    // perform k-fold cross-validation for\n    // each combination of parameters\n    var promises = combs.map(function (comb) {\n        var cParams = _o.merge(params, {\n            c : comb[0],\n            gamma: comb[1],\n            epsilon: comb[2],\n            nu: comb[3],\n            degree: comb[4],\n            r: comb[5]\n        });\n        var cPromises = subsets.map(function(ss){\n            var clf = new BaseSVM();\n\n            return clf\n                .train(ss.train, cParams) // train with train set\n                .then(function(){         // predict values for each example of the test set\n                    done += 1;\n                    deferred.notify({ done: done, total: total });\n                    return _a.map(ss.test, function(test){ return [clf.predictSync(test[0]), test[1]]; });\n                });\n        });\n\n        return Q.all(cPromises)\n            // group all predictions together and compute configuration's accuracy\n            // Note : Due to k-fold CV, each example of the dataset has been used for\n            //        both training and evaluation but never at the same time\n            .then(function (predictions) {\n                predictions = _a.flatten(predictions, 1);\n                var report = evaluator.compute(predictions);\n\n                return {\n                    config: cParams,\n                    report: report\n                };\n            }).fail(function (err ) {\n                throw err;\n            });\n    });\n\n    Q.all(promises).then(function (results) {\n        var best;\n        if (evaluator === evaluators.classification){\n            best = _a.max(results, function(r){ return r.report.fscore; });\n        }\n        else if (evaluator === evaluators.regression) {\n            best = _a.min(results, function(r){ return r.report.mse; });\n        }\n        else {\n            throw createError('Not implemented', 'ENOTIMPLEMENTED');\n        }\n\n        deferred.resolve([best.config, best.report]);\n    });\n\n\n    return deferred.promise;\n};","/home/travis/build/npmtest/node-npmtest-node-svm/node_modules/node-svm/lib/evaluators/index.js":"'use strict';\n\nvar svmTypes = require('../core/svm-types');\nvar createError = require('../util/create-error');\n\nvar classification = require('./classification');\nvar regression = require('./regression');\n\nmodule.exports = {\n    classification: classification,\n    regression: regression,\n    getDefault: function(config){\n        switch (config.svmType){\n            case svmTypes.C_SVC:\n            case svmTypes.NU_SVC:\n            case svmTypes.ONE_CLASS:\n                return classification;\n            case svmTypes.EPSILON_SVR:\n            case svmTypes.NU_SVR:\n                return regression;\n            default :\n                throw createError('No evaluator found for given configuration', 'ENOTFOUND');\n        }\n    }\n};","/home/travis/build/npmtest/node-npmtest-node-svm/node_modules/node-svm/lib/evaluators/classification.js":"'use strict';\n\nvar mout = require('mout'),\n    _a = mout.array,\n    _o = mout.object;\nvar Q = require('q');\nvar assert = require('assert');\n\nfunction computeFScore(precision, recall) {\n    if (recall === 0 && precision === 0){\n        return 0;\n    }\n    return 2 * recall * precision / (recall + precision);\n}\n\nfunction compute(predictions){\n    var sumPredicted = {}, sumExpected = {};\n\n    var classScores = _a.reduce(predictions, function(res, arr){\n        var predicted = arr[0], expected = arr[1];\n\n        sumPredicted[predicted] = (sumPredicted[predicted] || 0) +1.0;\n        sumExpected[expected] = (sumExpected[expected] || 0) +1.0;\n        res[expected] = res[expected] || {};\n        res[expected][predicted] = (res[expected][predicted]||0) +1.0;\n        return res;\n    }, {});\n\n    var classReports = _o.map(classScores, function (scores, label) {\n        var tp = scores[label] || 0, precision = 0, recall = 0;\n        if (tp !== 0){\n            precision = tp / sumPredicted[label];\n            recall = tp / sumExpected[label];\n        }\n        return {\n            precision: precision,\n            recall: recall,\n            fscore: computeFScore(precision, recall),\n            size: sumExpected[label]\n        };\n    });\n    var nbGood = _o.reduce(classScores, function(sum, scores, label){\n        return sum + (scores[label] || 0);\n    }, 0);\n    return  {\n        accuracy: nbGood / predictions.length,\n        fscore: _o.min(classReports, function(report){ return report.fscore; }).fscore,\n        recall: _o.min(classReports, function(report){ return report.recall; }).recall,\n        precision: _o.min(classReports, function(report){ return report.precision; }).precision,\n        class: classReports,\n        size: predictions.length\n    };\n}\n/**\n NOTICE : this function assumes your predictor is already trained\n */\nfunction evaluate(testSet, clf){\n    assert(testSet.length > 0, 'test set cannot be empty');\n    var predictions = testSet.map(function(test){\n        return [clf.predictSync(test[0]), test[1]];\n    });\n    return compute(predictions);\n}\n\nmodule.exports = {\n    evaluate: evaluate,\n    compute: compute\n};\n","/home/travis/build/npmtest/node-npmtest-node-svm/node_modules/node-svm/lib/evaluators/regression.js":"'use strict';\n\nvar _a = require('mout/array');\nvar Q = require('q');\nvar assert = require('assert');\nvar numeric= require('numeric');\nvar average = require('../util/average');\n\nfunction compute(predictions){\n    var errors =  _a.map(predictions, function(p){ return p[0] - p[1]; }),\n        avgError =  average(errors),\n        variance = average(errors.map(function(e){ return Math.pow(e - avgError, 2); }));\n\n    return {\n        mse: average(errors.map(function(e){ return Math.pow(e, 2); })),\n        std: Math.pow(variance, 0.5),\n        mean: avgError,\n        size: predictions.length\n    };\n}\n\nfunction evaluate(testSet, clf) {\n    var dims = numeric.dim(testSet);\n    assert(dims[0]>0 && dims[1] === 2 && dims[2]>0 , 'test set must be a list of [X,y] tuples');\n\n    var predictions = testSet.map(function(test){ return [clf.predictSync(test[0]), test[1]]; });\n    return compute(predictions);\n\n}\n\nmodule.exports = {\n    evaluate: evaluate,\n    compute: compute\n};\n","/home/travis/build/npmtest/node-npmtest-node-svm/node_modules/node-svm/lib/util/average.js":"'use strict';\n\nvar assert = require('assert');\nvar _a = require('mout/array');\nvar numeric = require('numeric');\n\nmodule.exports = function(arr){\n    var n = numeric.dim(arr)[0] || 0;\n    assert(n > 0,'array cannot be empty');\n    return _a.reduce(arr, function(sum, v){ return sum + v; }, 0) / n;\n};\n","/home/travis/build/npmtest/node-npmtest-node-svm/node_modules/node-svm/lib/util/split-dataset.js":"'use strict';\n\nvar assert = require('assert');\nvar _ = require('underscore');\n\nmodule.exports = function (dataset, kFold) {\n    kFold = kFold || 5;\n\n    var n = dataset.length,\n        nIndexes = _.range(kFold),\n        nbExPerGroup = Math.floor(n / kFold),\n        rest = n % kFold,\n        gDelta = 0;\n\n    assert(n >= kFold, 'kFold parameter must be <= n');\n    var shuffled = _.shuffle(dataset);\n\n    if (kFold === 1){\n        return [{\n            train: dataset,\n            test: dataset\n        }];\n    }\n\n    var sets = _.map(nIndexes, function(i){\n        var delta = i < rest ? 1 : 0;\n        var subset = _.chain(shuffled)\n            .rest(i * nbExPerGroup + gDelta)\n            .first(nbExPerGroup + delta)\n            .value();\n        gDelta += delta;\n        return subset;\n    });\n\n    return _(nIndexes).map(function(a, i, list){\n        return {\n            test: sets[i],\n            train: _.chain(list)\n                .without(i)\n                .map(function(iii){ return sets[iii]; })\n                .flatten(1)\n                .value()\n        };\n    });\n};","/home/travis/build/npmtest/node-npmtest-node-svm/node_modules/node-svm/lib/util/cross-combinations.js":"'use strict';\n\nvar assert = require('assert');\nvar numeric = require('numeric');\n\nmodule.exports = function(params){\n    var n = numeric.dim(params)[0] || 0,\n        m = numeric.dim(params)[1] || 0;\n    assert(n>0 && m>=0, 'params must be a 2d array');\n\n    var nbCombs = 1;\n    params.forEach(function(values){\n        nbCombs *= values.length > 0? values.length : 1;\n    });\n    var result = numeric.rep([nbCombs, params.length], 0);\n\n    var i = 0, j = 0, k = 0, l = 0;\n    var duration = 1;\n    for (i = 0; i < params.length; i++){\n        var input = params[i];\n        k = 0;\n\n        while ( k < nbCombs){\n            if (input.length > 0) {\n                for (j = 0; j < input.length; j++) {\n                    for (l = 0; l < duration; l++) {\n                        result[k][i] = input[j];\n                        k++;\n                    }\n                }\n            }\n            else {\n                for (l = 0; l < duration; l++) {\n                    result[k][i] = null;\n                    k++;\n                }\n            }\n        }\n        duration *= input.length || 1 ;\n\n    }\n    return result;\n};","/home/travis/build/npmtest/node-npmtest-node-svm/node_modules/node-svm/lib/util/normalize-dataset.js":"'use strict';\n\nvar assert = require('assert');\nvar mout = require('mout'),\n    _a = mout.array;\nvar numeric = require('numeric');\n\nvar avg = require('./average');\nvar std = require('./standard-deviation');\nvar normalizeInput = require('./normalize-input');\n\n\nmodule.exports = function(dataset, mu, sigma){\n\n    assert(dataset instanceof Array, 'dataset must be an list of [X,y] tuples');\n    assert(dataset.length>0, 'dataset cannot be empty');\n\n    var X = dataset.map(function(ex){return ex[0];}),\n        n = numeric.dim(X)[0] || 0,\n        m = numeric.dim(X)[1] || 0;\n\n    assert(m>0, 'number of features must be gt 0');\n\n    mu = mu || _a.range(m-1).map(function(i){\n        return avg(X.map(function(x){ return x[i] || 0; }));\n    });\n    sigma = sigma || _a.range(m-1).map(function(i){\n        return std(X.map(function(x){ return x[i] || 0; }));\n    });\n\n    return {\n        dataset: dataset.map(function(l){ return [normalizeInput(l[0], mu, sigma), l[1]]; }),\n        mu: mu,\n        sigma: sigma\n    };\n};","/home/travis/build/npmtest/node-npmtest-node-svm/node_modules/node-svm/lib/util/standard-deviation.js":"'use strict';\n\nvar assert = require('assert');\nvar _a = require('mout/array');\nvar numeric = require('numeric');\nvar average = require('./average');\n\nmodule.exports = function(arr){\n    var n = numeric.dim(arr)[0] || 0;\n    var m = numeric.dim(arr)[1] || 0;\n    assert(n > 0,'array cannot be empty');\n    assert(m === 0 ,'array must be 1d');\n    var avg = average(arr);\n    var variance = _a.reduce(arr, function(sum, v){ return sum + Math.pow(v - avg, 2); }, 0) / n;\n    return Math.pow(variance, 0.5);\n};\n","/home/travis/build/npmtest/node-npmtest-node-svm/node_modules/node-svm/lib/util/normalize-input.js":"'use strict';\n\nvar assert = require('assert');\nvar mout = require('mout'),\n    _a = mout.array;\nvar numeric = require('numeric');\nvar std = require('./standard-deviation');\n\n\nmodule.exports = function (input, mu, sigma){\n    assert(input instanceof Array, 'input must be a 1d array');\n    assert(mu instanceof Array, 'mu must be a 1d array');\n    assert(sigma instanceof Array, 'sigma must be a 1d array');\n    var sigmaInv = sigma.map(function(value){ return value === 0 ? 1 : 1 / value;});\n    return numeric.mul(numeric.add(input, numeric.neg(mu)), sigmaInv);\n};","/home/travis/build/npmtest/node-npmtest-node-svm/node_modules/node-svm/lib/util/reduce-dataset.js":"'use strict';\n\nvar assert = require('assert');\nvar _a = require('mout/array');\nvar numeric = require('numeric');\n\nmodule.exports = function(dataset, retainedVariance){\n    retainedVariance = retainedVariance || 0.99;\n    var dims = numeric.dim(dataset);\n\n    assert(dims[0]>0 && dims[1] === 2 && dims[2]>0 , 'dataset must be an list of [X,y] tuples');\n    var inputs =  dataset.map(function(ex){ return ex[0]; });\n    var covMatrix  = numeric.dot(numeric.transpose(inputs),inputs);\n    covMatrix = numeric.mul(covMatrix, numeric.rep(numeric.dim(covMatrix), 1 / inputs.length));\n    var usv = numeric.svd(covMatrix);\n\n    var getFirstColumns = function(matrix, nbColumns){\n        return matrix.map(function(line) {\n            return _a.take(nbColumns, function(i){ return line[i]; });\n        });\n    };\n    var n = dims[2],\n        k = dims[2],\n        j = 0, retain = 1;\n\n    while (true){\n        // decrease k while retain variance is acceptable\n        var num = 0;\n        var den = 0;\n        for (j = 0; j<n; j++){\n            if (j < k){\n                num += usv.S[j];\n            }\n            den += usv.S[j];\n        }\n        var newRetain = num / den;\n        if (newRetain < retainedVariance || k === 0){\n            k++;\n            break;\n        }\n        retain = newRetain;\n        k--;\n    }\n    var reducedU = getFirstColumns(usv.U, k);\n\n    return {\n        U: reducedU,\n        oldDimension: n,\n        newDimension: k,\n        dataset: dataset.map(function(ex){ return [numeric.dot(ex[0], reducedU), ex[1]]; }),\n        retainedVariance: retain\n    };\n};","/home/travis/build/npmtest/node-npmtest-node-svm/node_modules/node-svm/lib/util/read-dataset.js":"'use strict';\n\nvar Q = require('q');\nvar fs = require('fs');\nvar path = require('path');\nvar _a = require('mout/array');\nvar _ = require('underscore');\nvar numeric = require('numeric');\n\n\nvar readLibsvm = function (data) {\n    data = data.toString();\n    var lines = _.chain(data.split('\\n'))\n        .filter(function (str) { return str.trim() !== '';  }) // remove empty lines\n        .map(function(line){\n            var elts = line.split(' ');\n            return {\n                y: parseInt(elts[0], 10),\n                features: _.chain(elts)\n                    .rest(1)\n                    .map(function(str){\n                        var node = str.split(':');\n                        return {\n                            index: parseInt(node[0], 10),\n                            value: parseFloat(node[1])\n                        };\n                    }).value()\n            };\n        });\n    var nbFeatures = lines\n        .pluck('features')\n        .flatten()\n        .pluck('index')\n        .max()\n        .value();\n\n    return lines\n        .map(function (line) {\n            var x = numeric.rep([nbFeatures],0);\n            line.features.forEach(function(f){\n                x[f.index-1]= f.value;\n            });\n            return [x, line.y];\n        }).value();\n};\n\nvar readJson = function (data) {\n  return JSON.parse(data.toString());\n};\n\nvar read = function(fileName){\n    return Q.nfcall(fs.readFile, fileName)\n        .then(function (data) {\n            switch (path.extname(fileName)){\n                case '.json':\n                    return readJson(data);\n                default :\n                    return readLibsvm(data);\n            }\n        });\n};\n\nmodule.exports = read;","/home/travis/build/npmtest/node-npmtest-node-svm/node_modules/node-svm/Gruntfile.js":"'use strict';\n\nmodule.exports = function (grunt) {\n    require('load-grunt-tasks')(grunt);\n    grunt.initConfig({\n        gyp: {\n            addon: {}\n        },\n        simplemocha: {\n            options: {\n                reporter: 'spec',\n                timeout: '5000'\n            },\n            full: {\n                src: ['test/**/*.spec.js']\n            },\n            short: {\n                options: {\n                    reporter: 'dot'\n                },\n                src: ['test/*.spec.js']\n            }\n        },\n        jshint: {\n            options: {\n                jshintrc: '.jshintrc'\n            },\n            files: [\n                'Gruntfile.js',\n                'bin/*',\n                'lib/**/*.js',\n                'test/**/*.js',\n                'examples/**/*.js',\n                '!test/reports/**/*'\n            ]\n        },\n        exec: {\n            coveralls: {\n                command: 'STRICT_REQUIRE=1 node node_modules/.bin/istanbul cover ./node_modules/mocha/bin/_mocha --report lcovonly -- -R dot test/**/*.spec.js && cat ./coverage/lcov.info | ./node_modules/.bin/coveralls && rm -rf ./coverage'\n            }\n        },\n        watch: {\n            files: ['<%= jshint.files %>'],\n            tasks: ['jshint', 'simplemocha:short']\n        }\n    });\n    grunt.registerTask('test', ['jshint', 'simplemocha:full']);\n    grunt.registerTask('travis', ['test', 'exec:coveralls']);\n\n    grunt.registerTask('default', 'test');\n};"}